DEBUT_ALGORITHME

    STRUCTURE noeud
        valeur: entier
        suivant: ^noeud
        precedent: ^noeud
    FIN_STRUCTURE

    fonction creerListe(valeur: entier): ^noeud
    DEBUT
        n: ^noeud <- allouerNoeud(valeur)
        n.valeur <- valeur
        n.suivant <- NULL
        n.precedent <- NULL
        RETOURNER n
    FIN

    fonction ajouterDebut(tete: ^noeud, valeur: entier): ^noeud
    DEBUT
        n: ^noeud <- allouerNoeud(valeur)
        n.valeur <- valeur
        n.suivant <- tete
        n.precedent <- NULL
        SI tete != NULL ALORS
            tete.precedent <- n
        FIN_SI
        RETOURNER n
    FIN

    fonction ajouterFin(tete: ^noeud, valeur: entier): ^noeud
    DEBUT
        n, current: ^noeud
        SI tete == NULL ALORS
            RETOURNER ajouterDebut(tete, valeur)
        SINON
            n <- allouerNoeud(valeur)
            n.valeur <- valeur
            n.suivant <- NULL
            current <- tete
            TANT_QUE current.suivant != NULL FAIRE
                current <- current.suivant
            FIN_TANT_QUE
            current.suivant <- n
            n.precedent <- current
            RETOURNER tete
        FIN_SI
    FIN

    fonction supprimerTete(tete: ^noeud): ^noeud
    DEBUT
        SI tete != NULL ALORS
            temp: ^noeud <- tete
            tete <- tete.suivant
            SI tete != NULL ALORS
                tete.precedent <- NULL
            FIN_SI
            desallouerNoeud(temp)
        FIN_SI
        RETOURNER tete
    FIN

    fonction supprimerFin(tete: ^noeud): ^noeud
    DEBUT
        SI tete == NULL OU tete.suivant == NULL ALORS
            RETOURNER supprimerTete(tete)
        SINON
            current: ^noeud <- tete
            TANT_QUE current.suivant.suivant != NULL FAIRE
                current <- current.suivant
            FIN_TANT_QUE
            desallouerNoeud(current.suivant)
            current.suivant <- NULL
        FIN_SI
        RETOURNER tete
    FIN
    
    fonction permuterElements(tete: ^noeud, val1: entier, val2: entier): ^noeud
    DEBUT
        elem1, elem2: ^noeud
        elem1 <- rechercherElement(tete, val1)
        elem2 <- rechercherElement(tete, val2)
        SI elem1 != NULL ET elem2 != NULL ET elem1 != elem2 ALORS
            temp: entier <- elem1.valeur
            elem1.valeur <- elem2.valeur
            elem2.valeur <- temp
        FIN_SI
        RETOURNER tete
    FIN

    fonction retournerNombreElements(tete: ^noeud): entier
    DEBUT
        current: ^noeud <- tete
        count: entier <- 0
        TANT_QUE current != NULL FAIRE
            count <- count + 1
            current <- current.suivant
        FIN_TANT_QUE
        RETOURNER count
    FIN

    fonction inverserListe(tete: ^noeud): ^noeud
    DEBUT
        current, prev, suivant: ^noeud
        current <- tete
        prev <- NULL
        TANT_QUE current != NULL FAIRE
            suivant <- current.suivant
            current.suivant <- prev
            current.precedent <- suivant
            prev <- current
            current <- suivant
        FIN_TANT_QUE
        RETOURNER prev
    FIN

    fonction trierListe(tete: ^noeud): ^noeud
    DEBUT
        SI tete == NULL OU tete.suivant == NULL ALORS
            RETOURNER tete
        SINON
            current, index: ^noeud
            temp: entier
            current <- tete
            TANT_QUE current != NULL FAIRE
                index <- current.suivant
                TANT_QUE index != NULL FAIRE
                    SI current.valeur > index.valeur ALORS
                        temp <- current.valeur
                        current.valeur <- index.valeur
                        index.valeur <- temp
                    FIN_SI
                    index <- index.suivant
                FIN_TANT_QUE
                current <- current.suivant
            FIN_TANT_QUE
            RETOURNER tete
        FIN_SI
    FIN

    fonction rechercherElement(tete: ^noeud, val: entier): ^noeud
    DEBUT
        current: ^noeud <- tete
        TANT_QUE current != NULL ET current.valeur != val FAIRE
            current <- current.suivant
        FIN_TANT_QUE
        RETOURNER current
    FIN

FIN_ALGORITHME